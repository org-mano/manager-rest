import os
import shutil
import logging

from flask import current_app
from flask_restful_swagger import swagger

from manager_rest.security import SecuredResource
from manager_rest.rest import (
    requests_schema,
    responses,
)
from manager_rest.rest import (
    rest_decorators,
    rest_utils,
)
from manager_rest.resource_manager import get_resource_manager
from manager_rest.storage import (
    get_storage_manager,
    models,
)
from manager_rest.rest.rest_utils import (
    get_args_and_verify_arguments,
    get_json_and_verify_params,
)
from manager_rest.utils import create_filter_params_list_description

from flask import request


class Vims(SecuredResource):

    @swagger.operation(
        responseClass='List[{0}]'.format(models.Vim.__name__),
        nickname="list",
        notes="Returns a list of vims.",
        parameters=create_filter_params_list_description(
            models.Vim.response_fields,
            'blueprints'
        )
    )
    @rest_decorators.exceptions_handled
    @rest_decorators.marshal_with(models.Vim)
    @rest_decorators.create_filters(models.Vim)
    @rest_decorators.paginate
    @rest_decorators.sortable(models.Vim)
    @rest_decorators.all_tenants
    def get(self, _include=None, filters=None, pagination=None, sort=None,
            all_tenants=None, **kwargs):
        """
        List uploaded vims
        """
        
        current_app.logger.info('get vims list')
        return get_storage_manager().list(
            models.Vim, 
            include=_include,
            filters=filters,
            pagination=pagination,
            sort=sort,
            all_tenants=all_tenants
        )


class VimsId(SecuredResource):
    @swagger.operation(
        responseClass=models.Vim,
        nickname="getById",
        notes="Returns a vim by its id."
    )
    @rest_decorators.exceptions_handled
    @rest_decorators.marshal_with(models.Vim)
    def get(self, vim_id, _include=None, **kwargs):
        """
        Get deployment by id
        """
        current_app.logger.info('get vim by id, vim_id=' + vim_id)
        return get_storage_manager().get(
            models.Vim,
            vim_id,
            include=_include
        )

    @swagger.operation(
        responseClass=models.Vim,
        nickname="createVim",
        notes="Created a new vim.",
        parameters=[{'name': 'body',
                     'description': 'vim info',
                     'required': True,
                     'allowMultiple': False,
                     'dataType': requests_schema.VimRequest.__name__,
                     'paramType': 'body'}],
        consumes=[
            "application/json"
        ]
    )
    @rest_decorators.exceptions_handled
    @rest_decorators.marshal_with(models.Vim)
    def put(self, vim_id, **kwargs):
        """
        Create a vim
        """
        current_app.logger.info('put vim by id, vim_id=' + vim_id)
        #current_app.logger.info(kwargs)
        #vim_name = vim_id
        #request.args['vim_name']
        #type = request.args['type']
        #type = request.form['type']
        request_dict = get_json_and_verify_params({
            'type': {},
            #'inputs': {},
            #'inputs': {'optional': True, 'type': dict},
        })        
        current_app.logger.info(request_dict)
        type = request_dict['type']
        inputs=request_dict.get('inputs', {})
        current_app.logger.info('inputs=' + inputs)
        current_app.logger.info('vim_name=' + vim_id + ' type=' + type)
        vim = get_resource_manager().create_vim(vim_id, type, inputs)
        return vim, 201


    @swagger.operation(
        responseClass=models.Vim,
        nickname="deleteVim",
        notes="Delete a vim.",
        parameters=[{'name': 'body',
                     'description': 'vim info',
                     'required': True,
                     'allowMultiple': False,
                     'dataType': requests_schema.VimRequest.__name__,
                     'paramType': 'body'}],
        consumes=[
            "application/json"
        ]
    )
    @rest_decorators.exceptions_handled
    @rest_decorators.marshal_with(models.Vim)
    def delete(self, vim_id, **kwargs):
        """
        Delete a vim
        """
        current_app.logger.info('delete vim by id, vim_id=' + vim_id)
        vim = get_resource_manager().delete_vim(vim_id)
        return vim, 200

    @rest_decorators.exceptions_handled
    @rest_decorators.marshal_with(models.Vim)
    def patch(self, vim_id):
        """
        Update an existing vim
        """

        current_app.logger.info('update vim, vim_id=' + vim_id)
        request_dict = rest_utils.get_json_and_verify_params({'type'})
        #request_dict2 = rest_utils.get_json_and_verify_params({'inputs'})
        current_app.logger.info('req 1: ')
        current_app.logger.info(request_dict['inputs'])
        current_app.logger.info(request_dict['type'])
        
        #current_app.logger.info('req 2: ')
        #current_app.logger.info(request_dict2)

        vim = get_storage_manager().get(models.Vim, vim_id)
        vim.param = request_dict['inputs']
        vim.type = request_dict['type']
        vim.status = 'updated'
        return get_storage_manager().update(vim)


