import os
import shutil
import logging

from flask import current_app
from flask_restful_swagger import swagger

from manager_rest.security import SecuredResource
from manager_rest.rest import (
    requests_schema,
    responses,
)
from manager_rest.rest import (
    rest_decorators,
    rest_utils,
)
from manager_rest.resource_manager import get_resource_manager
from manager_rest.storage import (
    get_storage_manager,
    models,
)
from manager_rest.rest.rest_utils import (
    get_args_and_verify_arguments,
    get_json_and_verify_params,
)
from manager_rest.utils import create_filter_params_list_description

from flask import request

from keystoneauth1.identity import v3
from keystoneauth1 import session
from glanceclient import client as glanceclient

class Vnf_imgs(SecuredResource):

    @swagger.operation(
        responseClass='List[{0}]'.format(models.Vim.__name__),
        nickname="list",
        notes="Returns a list of vnf_imgs.",
        parameters=create_filter_params_list_description(
            models.Vim.response_fields,
            'blueprints'
        )
    )
    @rest_decorators.exceptions_handled
    @rest_decorators.marshal_with(models.Vnf_img)
    @rest_decorators.create_filters(models.Vnf_img)
    @rest_decorators.paginate
    @rest_decorators.sortable(models.Vnf_img)
    @rest_decorators.all_tenants
    def get(self, _include=None, filters=None, pagination=None, sort=None,
            all_tenants=None, **kwargs):
        """
        List vnf_imgs
        """
        
        current_app.logger.info('get vnf_imgs list')
        return get_storage_manager().list(
            models.Vnf_img, 
            include=_include,
            filters=filters,
            pagination=pagination,
            sort=sort,
            all_tenants=all_tenants
        )


class Vnf_imgsId(SecuredResource):
    @swagger.operation(
        responseClass=models.Vnf_img,
        nickname="getById",
        notes="Returns a vnf_img by its id."
    )
    @rest_decorators.exceptions_handled
    @rest_decorators.marshal_with(models.Vnf_img)
    def get(self, vnf_img_id, _include=None, **kwargs):
        """
        Get vnf_img by id
        """
        current_app.logger.info('get vnf_img by id, vnf_img_id =' + vnf_img_id)
        return get_storage_manager().get(
            models.Vnf_img,
            vnf_img_id,
            include=_include
        )

    @swagger.operation(
        responseClass=models.Vnf_img,
        nickname="createVnf_img",
        notes="Created a new vnf_img.",
        parameters=[{'name': 'body',
                     'description': 'vim info',
                     'required': True,
                     'allowMultiple': False,
                     #'dataType': requests_schema.Vnf_pkgRequest.__name__,
                     'paramType': 'body'}],
        consumes=[
            "application/json"
        ]
    )
    @rest_decorators.exceptions_handled
    @rest_decorators.marshal_with(models.Vnf_img)
    def put(self, vnf_img_id, **kwargs):
        """
        Create a vnf_img
        """
        current_app.logger.info('put vnf_img by id, vnf_img_id=' + vnf_img_id)
        #current_app.logger.info(kwargs)
        #vim_name = vim_id
        #request.args['vim_name']
        #type = request.args['type']
        #type = request.form['type']
        request_dict = get_json_and_verify_params({
            'vim_id': {},
            #'inputs': {},
            #'inputs': {'optional': True, 'type': dict},
        })        
        current_app.logger.info(request_dict)
        vim_id = request_dict['vim_id']
        vnf_pkg_id = request_dict['vnf_pkg_id']
        #current_app.logger.info('vim_name=' + vim_id + ' type=' + type)
        vnf_img = get_resource_manager().create_vnf_img(vnf_img_id, vnf_pkg_id, vim_id)
        return vnf_img, 201


    @swagger.operation(
        responseClass=models.Vnf_img,
        nickname="deleteVnf_img",
        notes="Delete a vnf_img.",
        parameters=[{'name': 'body',
                     'description': 'vim info',
                     'required': True,
                     'allowMultiple': False,
                     'dataType': requests_schema.VimRequest.__name__,
                     'paramType': 'body'}],
        consumes=[
            "application/json"
        ]
    )
    @rest_decorators.exceptions_handled
    @rest_decorators.marshal_with(models.Vnf_img)
    def delete(self, vnf_img_id, **kwargs):
        """
        Delete a vnf_img
        """
        current_app.logger.info('delete vnf_img by id, vnf_img_id=' + vnf_img_id)
        vnf_img = get_resource_manager().delete_vnf_img(vnf_img_id)
        return vnf_img, 200

    @rest_decorators.exceptions_handled
    @rest_decorators.marshal_with(models.Vnf_img)
    def patch(self, vnf_img_id):
        """
        Update an existing vnf_img
        """

        current_app.logger.info('update vnf_img, vnf_img_id=' + vnf_img_id)
        request_dict = rest_utils.get_json_and_verify_params({'action'})
        current_app.logger.info(request_dict)
        vim_id = request_dict['vim_id']
        action = request_dict['action']

        vnf_img = get_storage_manager().get(models.Vnf_img, vnf_img_id)
        if action == 'update':
            #vnf_img.img_url = request_dict['img_url']
            #vim.type = request_dict['type']
            vnf_img.vim_id = vim_id
            vnf_img.status = 'updated'
        #elif action == 'upload':
        #    current_app.logger.info('upload img, img_id=' + vnf_img_id)
        #    vim = get_storage_manager().get(models.

        return get_storage_manager().update(vnf_img)

class Vnf_imgsIdUpload(SecuredResource):
    @swagger.operation(
        responseClass=models.Vnf_img,
        nickname="uploadImage",
        notes="Returns a vnf_img by its id."
    )
    @rest_decorators.exceptions_handled
    @rest_decorators.marshal_with(models.Vnf_img)
    def get(self, vnf_img_id, _include=None, **kwargs):
        """
        Upload image by ivnf_img_id
        """
        current_app.logger.info('upload vnf_img by id, vnf_img_id =' + vnf_img_id)
        vnf_img = get_storage_manager().get(
            models.Vnf_img,
            vnf_img_id,
            include=_include
        )

        vnf_pkg_id = vnf_img.vnf_pkg_id
        vim_id = vnf_img.vim_id
        current_app.logger.info('pkg_id = ' + vnf_pkg_id + '  vim_id = ' + vim_id) 
        vnf_pkg = get_storage_manager().get(models.Vnf_pkg, vnf_pkg_id)
        vim = get_storage_manager().get(models.Vim, vim_id)
        img_url = vnf_pkg.img_url
        param = vim.param

        current_app.logger.info('img_url = ' + img_url)
        current_app.logger.info('param = ' + param)

        auth = v3.Password(auth_url="http://10.20.0.10:5000/v3", username="demo", password="111111", project_name="demo",user_domain_id="default", project_domain_id="default")
        sess = session.Session(auth=auth)
        glance = glanceclient.Client('2', session=sess)
        os_image = glance.images.create(name="cirros2")
        glance.images.update(os_image.id, disk_format='qcow2')
        glance.images.update(os_image.id, container_format='bare')
        glance.images.upload(os_image.id, open('/tmp/cirros-0.3.5-x86_64-disk.img', 'rb')) 
        current_app.logger.info(os_image.id)

        return vnf_img

