from flask_restful_swagger import swagger

from manager_rest import get_version_data
from manager_rest.rest import responses
from manager_rest.rest.rest_decorators import (
    exceptions_handled,
    marshal_with,
)
from manager_rest.rest.rest_utils import (
    get_args_and_verify_arguments,
    get_json_and_verify_params,
)
from manager_rest.security import SecuredResourceSkipTenantAuth

import logging
logging.basicConfig(level=logging.DEBUG,
                format='%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s',
                datefmt='%H:%M:%S',
                filename='/var/log/rest_api.log',
                filemode='a')

from flask_restful import Resource

class Grant(Resource):

    @swagger.operation(
        responseClass=responses.Grant,
        nickname="grant",
        notes="Returns Grant Lifecycle"
    )
    @exceptions_handled
    @marshal_with(responses.Grant)
    def put(self, **kwargs):
        request_schema = self.create_request_schema()
        request_dict = get_json_and_verify_params(request_schema)

        logging.info('call grant PUT')
        if request_dict['vnfmid']:
            logging.info("vnfmid='{0}'".format(request_dict['vnfmid']))
        if request_dict['nfvoid']:
            logging.info("nfvoid='{0}'".format(request_dict['nfvoid']))
        if request_dict.get('vimid'):
            logging.info("vimid='{0}'".format(request_dict.get('vimid')))
        if request_dict['exvimidlist']:
            logging.info("exvimidlist:")
            for exvimid in request_dict['exvimidlist']:
                logging.info("    exvimid='{0}'".format(exvimid))
        if request_dict.get('tenant'):
            logging.info("tenant='{0}'".format(request_dict.get('tenant')))
        if request_dict['vnfistanceid']:
            logging.info("vnfistanceid='{0}'".format(request_dict['vnfistanceid']))
        if request_dict['operationright']:
            logging.info("operationright='{0}'".format(request_dict['operationright']))
        if request_dict['vmlist']:
            logging.info("vmlist:")
            for vm in request_dict['vmlist']:
                if vm.get('vmflavor'):
                    logging.info("    vm.vmflavor='{0}'".format(vm.get('vmflavor')))
                if vm.get('vmnumber'):
                    logging.info("    vm.vmnumber='{0}'".format(vm.get('vmnumber')))

        return {'vimid': '12345678', 'tenant':'tenant1'}
    def create_request_schema(self):
        request_schema = {
            'vnfmid': {'optional': False},
            'nfvoid': {'optional': False},
            'vimid': {'optional': True},
            'exvimidlist': {'optional': False, 'type': list},
            'tenant': {'optional': True},
            'vnfistanceid': {'optional': False},
            'operationright': {'optional': False},
            'vmlist': {'optional': False, 'type': list}
        }
        return request_schema
