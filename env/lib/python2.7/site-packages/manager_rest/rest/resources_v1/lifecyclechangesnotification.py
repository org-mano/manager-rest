from flask_restful_swagger import swagger

from manager_rest import get_version_data
from manager_rest.rest import responses
from manager_rest.rest.rest_decorators import (
    exceptions_handled,
    marshal_with,
)
from manager_rest.rest.rest_utils import (
    get_args_and_verify_arguments,
    get_json_and_verify_params,
)
from manager_rest.security import SecuredResourceSkipTenantAuth
import logging
from flask_restful import Resource

class LifeCycleChangesNotification(Resource):

    @swagger.operation(
        responseClass=responses.LifeCycleChangesNotification,
        nickname="LifeCycle Changes Notification",
        notes="Returns LifeCycle Changes Notification"
    )
    @exceptions_handled
    @marshal_with(responses.LifeCycleChangesNotification)
    def post(self, **kwargs):
        request_schema = self.create_request_schema()
        request_dict = get_json_and_verify_params(request_schema)

        logging.info('call LifeCycle Changes Notification POST')

        if request_dict['nfvoid']:
            logging.info("nfvoid='{0}'".format(request_dict['nfvoid']))
        if request_dict['vnfmid']:
            logging.info("vnfmid='{0}'".format(request_dict['vnfmid']))
        if request_dict['vimid']:
            logging.info("vimid='{0}'".format(request_dict['vimid']))
        if request_dict['timestamp']:
            logging.info("timestamp='{0}'".format(request_dict['timestamp']))
        if request_dict['vnfinstanceid']:
            logging.info("vnfinstanceid='{0}'".format(request_dict['vnfinstanceid']))
        if request_dict['eventtype']:
            logging.info("eventtype='{0}'".format(request_dict['eventtype']))
        if request_dict.get('vmlist'):
            logging.info("vmlist:")
            for vm in request_dict.get('vmlist'):
                if vm.get('vmflavor'):
                    logging.info("    vm.vmflavor='{0}'".format(vm.get('vmflavor')))
                if vm.get('vmnumber'):
                    logging.info("    vm.vmnumber='{0}'".format(vm.get('vmnumber')))
                if vm.get('vmidlist'):
                    logging.info("    vmidlist:")
                    for vmid in vm.get('vmidlist'):
                        if vmid.get('vmname'):
                            logging.info("        vmid.vmname='{0}'".format(vmid.get('vmname')))
                        if vmid.get('vmid'):
                            logging.info("        vmid.vmid='{0}'".format(vmid.get('vmid')))

        status_code = 200
        return dict(status='ok'), status_code
    def create_request_schema(self):
        request_schema = {
            'nfvoid': {'optional': False},
            'vnfmid': {'optional': False},
            'vimid': {'optional': False},
            'timestamp': {'optional': False},
            'vnfinstanceid': {'optional': False},
            'eventtype': {'optional': False},
            'vmlist': {'optional': True, 'type': list}
        }
        return request_schema
