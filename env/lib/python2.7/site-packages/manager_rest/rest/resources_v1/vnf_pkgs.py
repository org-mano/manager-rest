import os
import shutil
import logging

from flask import current_app
from flask_restful_swagger import swagger

from manager_rest.security import SecuredResource
from manager_rest.rest import (
    requests_schema,
    responses,
)
from manager_rest.rest import (
    rest_decorators,
    rest_utils,
)
from manager_rest.resource_manager import get_resource_manager
from manager_rest.storage import (
    get_storage_manager,
    models,
)
from manager_rest.rest.rest_utils import (
    get_args_and_verify_arguments,
    get_json_and_verify_params,
)
from manager_rest.utils import create_filter_params_list_description

from flask import request


class Vnf_pkgs(SecuredResource):

    @swagger.operation(
        responseClass='List[{0}]'.format(models.Vim.__name__),
        nickname="list",
        notes="Returns a list of vnf_pkgs.",
        parameters=create_filter_params_list_description(
            models.Vim.response_fields,
            'blueprints'
        )
    )
    @rest_decorators.exceptions_handled
    @rest_decorators.marshal_with(models.Vnf_pkg)
    @rest_decorators.create_filters(models.Vnf_pkg)
    @rest_decorators.paginate
    @rest_decorators.sortable(models.Vnf_pkg)
    @rest_decorators.all_tenants
    def get(self, _include=None, filters=None, pagination=None, sort=None,
            all_tenants=None, **kwargs):
        """
        List vnf_pkgs
        """
        
        current_app.logger.info('get vnf_pkgs list')
        return get_storage_manager().list(
            models.Vnf_pkg, 
            include=_include,
            filters=filters,
            pagination=pagination,
            sort=sort,
            all_tenants=all_tenants
        )


class Vnf_pkgsId(SecuredResource):
    @swagger.operation(
        responseClass=models.Vnf_pkg,
        nickname="getById",
        notes="Returns a vnf_pkg by its id."
    )
    @rest_decorators.exceptions_handled
    @rest_decorators.marshal_with(models.Vnf_pkg)
    def get(self, vnf_pkg_id, _include=None, **kwargs):
        """
        Get vnf_pkg by id
        """
        current_app.logger.info('get vnf_pkg by id, vnf_pkg_id=' + vnf_pkg_id)
        return get_storage_manager().get(
            models.Vnf_pkg,
            vnf_pkg_id,
            include=_include
        )

    @swagger.operation(
        responseClass=models.Vnf_pkg,
        nickname="createVnf_pkg",
        notes="Created a new vnf_pkg.",
        parameters=[{'name': 'body',
                     'description': 'vim info',
                     'required': True,
                     'allowMultiple': False,
                     #'dataType': requests_schema.Vnf_pkgRequest.__name__,
                     'paramType': 'body'}],
        consumes=[
            "application/json"
        ]
    )
    @rest_decorators.exceptions_handled
    @rest_decorators.marshal_with(models.Vnf_pkg)
    def put(self, vnf_pkg_id, **kwargs):
        """
        Create a vnf_pkg
        """
        current_app.logger.info('put vnf_pky by id, vnf_pkg_id=' + vnf_pkg_id)
        #current_app.logger.info(kwargs)
        #vim_name = vim_id
        #request.args['vim_name']
        #type = request.args['type']
        #type = request.form['type']
        request_dict = get_json_and_verify_params({
            'img_url': {},
            #'inputs': {},
            #'inputs': {'optional': True, 'type': dict},
        })        
        current_app.logger.info(request_dict)
        img_url = request_dict['img_url']
        #inputs=request_dict.get('inputs', {})
        #current_app.logger.info('inputs=' + inputs)
        current_app.logger.info('img_url=' +img_url) 
        vnf_pkg = get_resource_manager().create_vnf_pkg(vnf_pkg_id, img_url)
        return vnf_pkg, 201


    @swagger.operation(
        responseClass=models.Vnf_pkg,
        nickname="deleteVnf_pke",
        notes="Delete a vnf_pkg.",
        parameters=[{'name': 'body',
                     'description': 'vim info',
                     'required': True,
                     'allowMultiple': False,
                     'dataType': requests_schema.VimRequest.__name__,
                     'paramType': 'body'}],
        consumes=[
            "application/json"
        ]
    )
    @rest_decorators.exceptions_handled
    @rest_decorators.marshal_with(models.Vim)
    def delete(self, vnf_pkg_id, **kwargs):
        """
        Delete a vnf_pkg
        """
        current_app.logger.info('delete vnf_pkg by id, vnf_pkg_id=' + vnf_pkg_id)
        vnf_pkg = get_resource_manager().delete_vnf_pkg(vnf_pkg_id)
        return vnf_pkg, 200

    @rest_decorators.exceptions_handled
    @rest_decorators.marshal_with(models.Vnf_pkg)
    def patch(self, vnf_pkg_id):
        """
        Update an existing vnf_pkg
        """

        current_app.logger.info('update vnf_pkg, vnf_pkg_id=' + vnf_pkg_id)
        request_dict = rest_utils.get_json_and_verify_params({'action'})
        #request_dict2 = rest_utils.get_json_and_verify_params({'inputs'})
        current_app.logger.info(request_dict['img_url'])
        current_app.logger.info(request_dict['action'])
        
        action = request_dict['action']

        vnf_pkg = get_storage_manager().get(models.Vnf_pkg, vnf_pkg_id)
        if action == 'update':
            vnf_pkg.img_url = request_dict['img_url']
        elif action == 'active':
            vnf_pkg.is_active = True
        elif action == 'deactive':
            vnf_pkg.is_active = False

        #vim.type = request_dict['type']
        vnf_pkg.status = 'updated'
        return get_storage_manager().update(vnf_pkg)


